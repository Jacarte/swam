/*
 * Copyright 2018 Lucas Satabin
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package swam

import enumeratum.values._

sealed abstract class OpCode(val value: Int) extends IntEnumEntry

object OpCode extends IntEnum[OpCode] {

  val values = findValues

  case object Unreachable extends OpCode(0x00)
  case object Nop extends OpCode(0x01)
  case object Block extends OpCode(0x02)
  case object Loop extends OpCode(0x03)
  case object If extends OpCode(0x04)
  case object Else extends OpCode(0x05)
  // reserved 0x06-0x0a
  case object End extends OpCode(0x0b)
  case object Br extends OpCode(0x0c)
  case object BrIf extends OpCode(0x0d)
  case object BrTable extends OpCode(0x0e)
  case object Return extends OpCode(0x0f)
  case object Call extends OpCode(0x10)
  case object CallIndirect extends OpCode(0x11)
  // reserved 0x12-0x19
  case object Drop extends OpCode(0x1a)
  case object Select extends OpCode(0x1b)
  // reserved 0x1c-0x1f
  case object GetLocal extends OpCode(0x20)
  case object SetLocal extends OpCode(0x21)
  case object TeeLocal extends OpCode(0x22)
  case object GetGlobal extends OpCode(0x23)
  case object SetGlobal extends OpCode(0x24)
  // reserved 0x25-0x27
  case object I32Load extends OpCode(0x28)
  case object I64Load extends OpCode(0x29)
  case object F32Load extends OpCode(0x2a)
  case object F64Load extends OpCode(0x2b)
  case object I32Load8S extends OpCode(0x2c)
  case object I32Load8U extends OpCode(0x2d)
  case object I32Load16S extends OpCode(0x2e)
  case object I32Load16U extends OpCode(0x2f)
  case object I64Load8S extends OpCode(0x30)
  case object I64Load8U extends OpCode(0x31)
  case object I64Load16S extends OpCode(0x32)
  case object I64Load16U extends OpCode(0x33)
  case object I64Load32S extends OpCode(0x34)
  case object I64Load32U extends OpCode(0x35)
  case object I32Store extends OpCode(0x36)
  case object I64Store extends OpCode(0x37)
  case object F32Store extends OpCode(0x38)
  case object F64Store extends OpCode(0x39)
  case object I32Store8 extends OpCode(0x3a)
  case object I32Store16 extends OpCode(0x3b)
  case object I64Store8 extends OpCode(0x3c)
  case object I64Store16 extends OpCode(0x3d)
  case object I64Store32 extends OpCode(0x3e)
  case object CurrentMemory extends OpCode(0x3f)
  case object GrowMemory extends OpCode(0x40)
  case object I32Const extends OpCode(0x41)
  case object I64Const extends OpCode(0x42)
  case object F32Const extends OpCode(0x43)
  case object F64Const extends OpCode(0x44)
  case object I32Eqz extends OpCode(0x45)
  case object I32Eq extends OpCode(0x46)
  case object I32Ne extends OpCode(0x47)
  case object I32LtS extends OpCode(0x48)
  case object I32LtU extends OpCode(0x49)
  case object I32GtS extends OpCode(0x4a)
  case object I32GtU extends OpCode(0x4b)
  case object I32LeS extends OpCode(0x4c)
  case object I32LeU extends OpCode(0x4d)
  case object I32GeS extends OpCode(0x4e)
  case object I32GeU extends OpCode(0x4f)
  case object I64Eqz extends OpCode(0x50)
  case object I64Eq extends OpCode(0x51)
  case object I64Ne extends OpCode(0x52)
  case object I64LtS extends OpCode(0x53)
  case object I64LtU extends OpCode(0x54)
  case object I64GtS extends OpCode(0x55)
  case object I64GtU extends OpCode(0x56)
  case object I64LeS extends OpCode(0x57)
  case object I64LeU extends OpCode(0x58)
  case object I64GeS extends OpCode(0x59)
  case object I64GeU extends OpCode(0x5a)
  case object F32Eq extends OpCode(0x5b)
  case object F32Ne extends OpCode(0x5c)
  case object F32Lt extends OpCode(0x5d)
  case object F32Gt extends OpCode(0x5e)
  case object F32Le extends OpCode(0x5f)
  case object F32Ge extends OpCode(0x60)
  case object F64Eq extends OpCode(0x61)
  case object F64Ne extends OpCode(0x62)
  case object F64Lt extends OpCode(0x63)
  case object F64Gt extends OpCode(0x64)
  case object F64Le extends OpCode(0x65)
  case object F64Ge extends OpCode(0x66)
  case object I32Clz extends OpCode(0x67)
  case object I32Ctz extends OpCode(0x68)
  case object I32Popcnt extends OpCode(0x69)
  case object I32Add extends OpCode(0x6a)
  case object I32Sub extends OpCode(0x6b)
  case object I32Mul extends OpCode(0x6c)
  case object I32DivS extends OpCode(0x6d)
  case object I32DivU extends OpCode(0x6e)
  case object I32RemS extends OpCode(0x6f)
  case object I32RemU extends OpCode(0x70)
  case object I32And extends OpCode(0x71)
  case object I32Or extends OpCode(0x72)
  case object I32Xor extends OpCode(0x73)
  case object I32Shl extends OpCode(0x74)
  case object I32ShrS extends OpCode(0x75)
  case object I32ShrU extends OpCode(0x76)
  case object I32Rotl extends OpCode(0x77)
  case object I32Rotr extends OpCode(0x78)
  case object I64Clz extends OpCode(0x79)
  case object I64Ctz extends OpCode(0x7a)
  case object I64Popcnt extends OpCode(0x7b)
  case object I64Add extends OpCode(0x7c)
  case object I64Sub extends OpCode(0x7d)
  case object I64Mul extends OpCode(0x7e)
  case object I64DivS extends OpCode(0x7f)
  case object I64DivU extends OpCode(0x80)
  case object I64RemS extends OpCode(0x81)
  case object I64RemU extends OpCode(0x82)
  case object I64And extends OpCode(0x83)
  case object I64Or extends OpCode(0x84)
  case object I64Xor extends OpCode(0x85)
  case object I64Shl extends OpCode(0x86)
  case object I64ShrS extends OpCode(0x87)
  case object I64ShrU extends OpCode(0x88)
  case object I64Rotl extends OpCode(0x89)
  case object I64Rotr extends OpCode(0x8a)
  case object F32Abs extends OpCode(0x8b)
  case object F32Neg extends OpCode(0x8c)
  case object F32Ceil extends OpCode(0x8d)
  case object F32Floor extends OpCode(0x8e)
  case object F32Trunc extends OpCode(0x8f)
  case object F32Nearest extends OpCode(0x90)
  case object F32Sqrt extends OpCode(0x91)
  case object F32Add extends OpCode(0x92)
  case object F32Sub extends OpCode(0x93)
  case object F32Mul extends OpCode(0x94)
  case object F32Div extends OpCode(0x95)
  case object F32Min extends OpCode(0x96)
  case object F32Max extends OpCode(0x97)
  case object F32Copysign extends OpCode(0x98)
  case object F64Abs extends OpCode(0x99)
  case object F64Neg extends OpCode(0x9a)
  case object F64Ceil extends OpCode(0x9b)
  case object F64Floor extends OpCode(0x9c)
  case object F64Trunc extends OpCode(0x9d)
  case object F64Nearest extends OpCode(0x9e)
  case object F64Sqrt extends OpCode(0x9f)
  case object F64Add extends OpCode(0xa0)
  case object F64Sub extends OpCode(0xa1)
  case object F64Mul extends OpCode(0xa2)
  case object F64Div extends OpCode(0xa3)
  case object F64Min extends OpCode(0xa4)
  case object F64Max extends OpCode(0xa5)
  case object F64Copysign extends OpCode(0xa6)
  case object I32WrapI64 extends OpCode(0xa7)
  case object I32TruncSF32 extends OpCode(0xa8)
  case object I32TruncUF32 extends OpCode(0xa9)
  case object I32TruncSF64 extends OpCode(0xaa)
  case object I32TruncUF64 extends OpCode(0xab)
  case object I64ExtendSI32 extends OpCode(0xac)
  case object I64ExtendUI32 extends OpCode(0xad)
  case object I64TruncSF32 extends OpCode(0xae)
  case object I64TruncUF32 extends OpCode(0xaf)
  case object I64TruncSF64 extends OpCode(0xb0)
  case object I64TruncUF64 extends OpCode(0xb1)
  case object F32ConvertSI32 extends OpCode(0xb2)
  case object F32ConvertUI32 extends OpCode(0xb3)
  case object F32ConvertSI64 extends OpCode(0xb4)
  case object F32ConvertUI64 extends OpCode(0xb5)
  case object F32DemoteF64 extends OpCode(0xb6)
  case object F64ConvertSI32 extends OpCode(0xb7)
  case object F64ConvertUI32 extends OpCode(0xb8)
  case object F64ConvertSI64 extends OpCode(0xb9)
  case object F64ConvertUI64 extends OpCode(0xba)
  case object F64PromoteF32 extends OpCode(0xbb)
  case object I32ReinterpretF32 extends OpCode(0xbc)
  case object I64ReinterpretF64 extends OpCode(0xbd)
  case object F32ReinterpretI32 extends OpCode(0xbe)
  case object F64ReinterpretI64 extends OpCode(0xbf)

}
