#
# Copyright 2018 Lucas Satabin
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# All Swam configuration lives here. It makes it possible
# to tune how the engine behaves from validation to execution.
swam {

  # Configuration that only affects how the runtime part behaves.
  runtime {

    # Whether the engine compiles and run low-level assembly language.
    # This language aims to be more efficient but is farther from the
    # bytecode and may be harder to debug.
    use-low-level-asm = true

    compiler {

      low {

        # the byte order for compiled assembly code
        # possible values are:
        #  - `native` (the platform native byte order)
        #  - `big-endian`
        #  - `little-endian`
        byte-order = {
          type = native
        }

      }

    }

    stack {

      # stack configuration for the low level interpreter
      low {

        # the total stack size
        size = 64 KiB

      }

      # stack configuration for the high level interpreter
      high {

        # The height of the local execution stack
        # Each frame gets its own stack, so this can be kept
        # quite small.
        size = 128 B

        # The depth of the call stack. performing more nested
        # call than this limit will result in a stack overflow exception
        call-depth = 500

      }

    }

    data {

      # Whether the data parts are kept on-heap or off-heap
      # If you load modules with large amount of data and they
      # are long-lived, it may be interesting to store data off-heap
      on-heap = true

      hard-max = ${swam.validation.hard-max}

    }

    tracer {
      # The logging handler
      # possible values are:
      #  - `console` 
      #  - `file`
      #  - `custom`
      #  - `none`
      handler = {
        type = none
      }
      filter = "spush|spop|mread|mwrite|msize|mgrow"
      
      # The logging level of the tracer
      # possible values are:
      #  - `ALL` 
      #  - `INFO`
      #  - `FINER`
      #  - `FINEST`
      #  - `FINE`
      #  - `SEVERE`
      #  - `OFF`
      #  - `WARNING`
      #  - `CONFIG`
      level = "ALL"

      socket-handler = {
        host = "localhost"
        port = 8080
      }

      file-handler = {
        pattern = "log.%u.%g.txt"
        append = true
        folder = "logs"
      }

      custom = {
        class-name = "swam.runtime..."
      }
    }
  }

}